<div class="bg-white p-8">
  <div class="tab-section rounded-lg min-h-[400px]">
    <div class="flex flex-wrap gap-1 border-b border-stone-300">
      <button class="inline-block p-4 text-stone-600 font-semibold rounded-t-lg active"
        data-tab-target="#tab1">Editar Perfil</button>
      <button class="inline-block p-4 text-stone-600 font-semibold rounded-t-lg active"
        data-tab-target="#tab2">Estatística </button>
    </div>
    <div class="mt-4">
      <div id="tab1" class="tab-content text-gray-700">
        <div class="flex">
          <aside class="card bg-white border border-gray-300 rounded-lg text-center justify-center flex flex-col items-center w-1/3">
            <% if resource.avatar? %>
              <img src="<%= resource.avatar %>" alt="Avatar" class="rounded-full border-yellow-500 border-4 border-secondary w-72 h-72 mb-4" />
            <% else %>
              <%= lucide_icon('user-round', class: "rounded-full border-yellow-500 border-4 border-secondary w-72 h-72 mb-4") %>
            <% end %>
            <h2 class="text-2xl font-semibold mb-4"><%= resource.name %></h2>
            <p class="text-lg">
              Quantidade de horas que trabalha na semana: <br />
              <strong class="text-4xl"><%= resource.formatted_hours_per_week %></strong>
            </p>
            <br />
            <p class="text-lg">
              Tempo restante do compromisso: <br />
              <strong class="text-4xl"><%= resource.commitments.last.time_remaining if resource.commitments.any? %></strong>
            </p>
          </aside>  
          <main class="flex-1 p-4">
            <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put, class: 'space-y-4' }) do |f| %>
              <%= render "devise/shared/error_messages", resource: resource %>

              <div class="field">
                <%= f.label :name, "Nome", class: 'block font-semibold' %>
                <%= f.text_field :name, class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "Seu nome" %>
              </div>

              <div class="field">
                <%= f.label :email, class: 'block font-semibold' %>
                <%= f.email_field :email, autofocus: true, autocomplete: "email", class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "Seu email" %>
              </div>

              <div class="field">
                <%= f.label :avatar, class: 'block font-semibold' %>
                <%= f.url_field :avatar, class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "URL da imagem (ex: https://github.com/eltonsantos.png)" %>
              </div>

              <div class="field">
                <%= f.label :hours_per_week, "Horas por semana", class: 'block font-semibold' %>
                <%= f.number_field :hours_per_week, step: 0.25, class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "Quantidade de horas trabalhadas por semana" %>
              </div>

              <div class="field">
                <%= f.label :password, "Senha", class: 'block font-semibold' %>
                <%= f.password_field :password, autocomplete: "new-password", class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "Nova senha (deixe em branco para não alterar)" %>
              </div>

              <div class="field">
                <%= f.label :password_confirmation, "Confirmação de senha", class: 'block font-semibold' %>
                <%= f.password_field :password_confirmation, autocomplete: "new-password", class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "Confirme a nova senha" %>
              </div>

              <div class="field">
                <%= f.label :current_password, "Senha atual", class: 'block font-semibold' %>
                <%= f.password_field :current_password, autocomplete: "current-password", class: 'mt-1 block w-full border border-gray-300 rounded-md p-2', placeholder: "Senha atual" %>
              </div>

              <div class="actions mt-4">
                <%= f.submit "Atualizar", class: 'bg-blue-600 text-white font-semibold py-2 px-4 rounded' %>
              </div>
            <% end %>

            <h3 class="text-lg font-semibold mt-6 border-t-4 border-red-400">Zona de perigo</h3>
            <div>
              <%= button_to registration_path(resource_name), data: { confirm: "Você tem certeza? Essa ação não poderá ser desfeita e todos os dados serão perdidos!" }, method: :delete, class: 'button orange mt-3 inline-flex items-center bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 font-bold' do %>
                <span class="mr-2">
                  <%= lucide_icon('x', class: 'text-white') %>
                </span>
                Cancelar minha conta
              <% end %>
            </div>
          </main>
        </div>
      </div>
      <div id="tab2" class="hidden tab-content text-gray-700">
        <h4 class="font-bold mt-9 mb-4 text-2xl">Estatística</h4>
        <%= render partial: 'charts/index', locals: { tarefa: Task.first } %>
      </div>
    </div>
  </div>
</div>

<script>
  if (typeof tabsInitialized === "undefined") {
    const tabs = document.querySelectorAll('[data-tab-target]');
    const activeClass = 'text-stone-900';

    let tabsInitialized = true;

    tabs[0].classList.add(activeClass);
    document.querySelector('#tab1').classList.remove('hidden');

    const loadChartData = () => {
      fetch('/charts.json')
        .then(response => response.json())
        .then(data => {
          const ctx = document.getElementById('tasksChart').getContext('2d');
          new Chart(ctx, {
            type: 'bar',
            data: {
              labels: ['Total', 'Concluídas', 'Em andamento', 'Arquivadas'],
              datasets: [{
                label: 'Tarefas Totais',
                data: [data.total, data.completed, data.in_progress, data.archived],
                backgroundColor: [
                  'rgba(54, 162, 235, 0.5)',
                  'rgba(75, 192, 192, 0.5)',
                  'rgba(45, 162, 12, 0.5)',
                  'rgba(255, 99, 132, 0.5)'
                ],
                borderColor: [
                  'rgba(54, 162, 235, 1)',
                  'rgba(75, 192, 192, 1)',
                  'rgba(45, 162, 12, 1)',
                  'rgba(255, 99, 132, 1)'
                ],
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: {
                  beginAtZero: true,
                  ticks: {
                    stepSize: 1
                  }
                }
              }
            }
          });

          const ctxPie = document.getElementById('categoriesChart').getContext('2d');
          const categoryLabels = Object.keys(data.categories);
          const categoryData = Object.values(data.categories);

          new Chart(ctxPie, {
            type: 'pie',
            data: {
              labels: categoryLabels,
              datasets: [{
                data: categoryData,
                backgroundColor: [
                  'rgba(255, 99, 132, 0.5)',
                  'rgba(54, 162, 235, 0.5)',
                  'rgba(255, 206, 86, 0.5)',
                  'rgba(75, 192, 192, 0.5)',
                  'rgba(153, 102, 255, 0.5)',
                  'rgba(255, 159, 64, 0.5)'
                ],
                borderColor: [
                  'rgba(255, 99, 132, 1)',
                  'rgba(54, 162, 235, 1)',
                  'rgba(255, 206, 86, 1)',
                  'rgba(75, 192, 192, 1)',
                  'rgba(153, 102, 255, 1)',
                  'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'right',
                  labels: {
                    padding: 20
                  }
                }
              }
            }
          });
        });
    };

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const targetContent = document.querySelector(tab.dataset.tabTarget);

        document.querySelectorAll('.tab-content').forEach(content => content.classList.add('hidden'));
        targetContent.classList.remove('hidden');

        document.querySelectorAll('.text-stone-900').forEach(activeTab => activeTab.classList.remove(activeClass));

        tab.classList.add(activeClass);

        if (tab.dataset.tabTarget === "#tab2" && !document.getElementById('tasksChart').__loaded) {
          loadChartData();
          document.getElementById('tasksChart').__loaded = true;
        }
      });
    });

    if (window.location.hash === '#tab2' || document.querySelector('[data-tab-target="#tab2"]').classList.contains('active')) {
      loadChartData();
      document.getElementById('tasksChart').__loaded = true;
    }
  }
</script>